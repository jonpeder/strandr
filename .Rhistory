#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
utput$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
ooutput
output
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=3000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
i = 3
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=3000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
stedsnavn_api$navn
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
i = 3
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
return(output[,c(3:8)])
output[,c(3:8)]
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
i = 1
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
stedsnavn_api$navn$meterFraPunkt
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[n]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[n]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
library(strandr)
library(strandr)
devtools::load_all(".")
library(strandr)
library(strandr)
library(strandr)
library(strandr)
library(strandr)
library(jsonlite)
library(strandr)
roxygen2::roxygenise()
library(strandr)
library(strandr)
roxygen2::roxygenise()
library(strandr)
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
i = 1
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
stedsnavn_api$navn$representasjonspunkt$nord[n]
stedsnavn_api$navn$representasjonspunkt
stedsnavn_api$navn$representasjonspunkt[1,]
stedsnavn_api$navn$representasjonspunkt[,2]
stedsnavn_api$navn$representasjonspunkt[n,2]
stedsnavn_api$navn$representasjonspunkt[,2]
stedsnavn_api$navn$representasjonspunkt[,1]
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt[n,2]
name_lon <- stedsnavn_api$navn$representasjonspunkt[n,1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
source("R/points2dist.R")
source("R/points2deg.R")
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt[n,2]
name_lon <- stedsnavn_api$navn$representasjonspunkt[n,1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
output
library(strandr)
stedsnavn_api$navn[[1]]
stedsnavn_api$navn[[1]]
stedsnavn_api$navn[[1]][1]
stedsnavn_api$navn$stedsnavn[[1]][1,]
stedsnavn_api$navn$stedsnavn[[1]][,1]
stedsnavn_api$navn$stedsnavn[[1]][1]
stedsnavn_api$navn$stedsnavn[[1]][1,1]
library(strandr)
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
library(sp)
library(rgdal)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
# Convert 'strand' spatial polygons dataframe to projection longlat and datum wgs84
strand.4.0 <- spTransform(strand, CRS(ll_prj))
devtools::load_all(".")
rm(list = c("points2deg", "points2dist"))
devtools::load_all(".")
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
test = strand
View(test)
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
# Convert 'strand' spatial polygons dataframe to projection longlat and datum wgs84
strand.4.0 <- spTransform(strand, CRS(ll_prj))
# Identify municipalities intersecting with input coordinates
strand_codes <- over(pts, strand.4.0)
data.frame(strand = strand_codes[,2])
strand_codes
strand_codes[,4]
library(strandr)
knitr::opts_chunk$set(echo = TRUE)
install.packages("multiplex")
g = multiplex::read.gml("../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml")
install.packages("igraph")
igraph::read.graph(file = "../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml", format = c("gml"))
library(igraph)
g = sf::read_sf("../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml")
kommuner = as(g, sp)
kommuner = as(g, "Spatial")
proj4string(kommuner)
strand = load(strand.4.0)
strand = strand.4.0
kommuner$navnerom
kommuner$land
g = sf::read_sf("../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml", as_tibble = FALSE)
g = sf::st_read("../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml")
sf::st_layers("../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml")
g = sf::st_read("../../../../Downloads/Basisdata_0000_Norge_4258_Kommuner_GML.gml", layer = "Kommune")
kommuner = as(g, "Spatial")
library(usethis)
kommuner <- spTransform(strand, CRS(ll_prj))
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
# Convert 'strand' spatial polygons dataframe to projection longlat and datum wgs84
strand.4.0 <- spTransform(strand, CRS(ll_prj))
kommuner <- spTransform(strand, CRS(ll_prj))
munic_names <- over(pts, kommuner)
kommuner = as(g, "Spatial")
kommuner <- spTransform(kommuner, CRS(ll_prj))
munic_names <- over(pts, kommuner)
munic_names$navn
munic_names$navnerom
munic_names$samiskForvaltningsområde
munic_names$opphav
munic_names$navn
unlist(munic_names$navn)
munic_names$navn[[]][1]
munic_names$navn[[]]
munic_names$navn[[1]]
munic_names$språk
munic_names$språk[[1]]
munic_names$språk[[1]] == "nor"
munic_names$navn[[1]][munic_names$språk[[1]] == "nor"]
munic_names$navn[[1]][munic_names$sprak[[1]] == "nor"]
munic_names$navn[[1]][munic_names[5][[1]] == "nor"]
munic_names$navn[[1]][munic_names[6][[1]] == "nor"]
munic_names$navn[[1]][munic_names[4][[1]] == "nor"]
munic_names[4]
munic_names[5]
munic_names[6]
munic_names[7]
munic_names[8]
munic_names[9]
munic_names[20]
munic_names[10]
munic_names[11]
munic_names$navn[[1]][munic_names[11][[1]] == "nor"]
munic_names[11][[1]]
munic_names[11]
munic_names[11][1]
munic_names[11][1,1]
munic_names[11][1,1] == "nor"
names(munic_names[11])
names(munic_names[11]) == "lang"
names(munic_names[11]) = "lang"
kommuner[[11]]
names(kommuner[[11]])
names(munic_names[11])
names(munic_names[11]) == "nor"
kommuner[[11]]
kommuner[[11]] == "nor"
kommuner[11]
kommuner[[11]]
names(kommuner[[11]])
names(kommuner[[11]]) = "lang"
kommuner$språk
kommuner = as(g, "Spatial")
kommuner <- spTransform(kommuner, CRS(ll_prj))
kommuner[[11]]
munic_names <- over(pts, kommuner)
names(munic_names$språk)
names(kommuner)
names(kommuner[[11]])
names(kommuner[[11]])
munic_names[[11]]
munic_names[[11]][[1]]
munic_names[[11]][[1]] == "nor"
munic_names$navn[munic_names[[11]][[1]] == "nor"]
munic_names$navn[[munic_names[[11]][[1]] == "nor"]]
munic_names$navn[munic_names[[11]][[1]] == "nor"]
munic_names$navn
munic_names$navn[[1]]
munic_names$navn[[1]][munic_names[[11]][[1]] == "nor"]
# loop over points
for (i in 1:length(lat)) {
munic_names$navn[[i]][munic_names[[11]][[i]] == "nor"]
}
# loop over points
for (i in 1:length(lat)) {
cat(munic_names$navn[[i]][munic_names[[11]][[i]] == "nor"])
}
# get municipality names
munic_names = null
for (i in 1:length(lat)) {
munic_names = c(munic_names, munic$navn[[i]][munic[[11]][[i]] == "nor"])
}
# get municipality names
munic_names = NULL
for (i in 1:length(lat)) {
munic_names = c(munic_names, munic$navn[[i]][munic[[11]][[i]] == "nor"])
}
munic <- over(pts, kommuner)
# get municipality names
munic_names = NULL
for (i in 1:length(lat)) {
munic_names = c(munic_names, munic$navn[[i]][munic[[11]][[i]] == "nor"])
}
munic_names
munic$navn[[3]][munic[[11]][[3]] == "nor"]
is.null(munic$navn[[3]][munic[[11]][[3]] == "nor"])
# get municipality names
munic_names = NULL
for (i in 1:length(lat)) {
tmp = munic$navn[[i]][munic[[11]][[i]] == "nor"]
if (is.nul(tmp)) {tmp = ""}
munic_names = c(munic_names, tmp)
}
# get municipality names
munic_names = NULL
for (i in 1:length(lat)) {
tmp = munic$navn[[i]][munic[[11]][[i]] == "nor"]
if (is.null(tmp)) {tmp = ""}
munic_names = c(munic_names, tmp)
}
munic_names
lat = c(58.347572, 59.894814, 69.687585)
lon = c(8.481953, 10.814636, 18.953734)
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
munic <- over(pts, kommuner)
# get municipality names
munic_names = NULL
for (i in 1:length(lat)) {
tmp = munic$navn[[i]][munic[[11]][[i]] == "nor"]
if (is.null(tmp)) {tmp = ""}
munic_names = c(munic_names, tmp)
}
munic_names
proj4string(kommuner)
proj4string(strand)
use_data(strand, kommuner, internal = TRUE, overwrite = TRUE)
library(strandr)
library(strandr)
library(strandr)
strandkoder(lat = c(69.57696, 70.44070, 62.259262), lon = c(24.840064, 23.186622, 12.734821))
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Latitude" = c(65.834805, 70.44070), "Longitude" = c(13.191345, 23.186622))
ex_out <- strandr(ex_in, lat = ex_in$Latitude, lon = ex_in$Longitude)
ex_out
library(strandr)
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Latitude" = c(65.834805, 70.44070), "Longitude" = c(13.191345, 23.186622))
ex_out <- strandr(ex_in, lat = ex_in$Latitude, lon = ex_in$Longitude)
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Latitude" = c(65.834805, 70.44070), "Longitude" = c(13.191345, 23.186622))
strandr(ex_in, lat = ex_in$Latitude, lon = ex_in$Longitude)
library(strandr)
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Latitude" = c(65.834805, 70.44070), "Longitude" = c(13.191345, 23.186622))
ex_out <- strandr(ex_in, lat = ex_in$Latitude, lon = ex_in$Longitude)
ex_out
stedsnavn(lat = c(65.834805, 70.44070), lon = c(13.191345, 23.186622))
library(strandr)
