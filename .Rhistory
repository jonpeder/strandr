stedsnavn_api$navn[3]
#Stop loop at first hit
stedsnavn_api$navn[4]
#Stop loop at first hit
stedsnavn_api$navn[5]
#Stop loop at first hit
stedsnavn_api$navn[6]
#Stop loop at first hit
stedsnavn_api$navn[5][1]
#Stop loop at first hit
stedsnavn_api$navn[5][1]
#}
# extract coordinates of locality name
name_lon <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lat <- stedsnavn_api$navn$representasjonspunkt$øst[1]
name_lat
name_lon
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2deg(name_lon, name_lat, lon[i], lat[i])
d
D
A
#}
# extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
D
stedsnavn_api$navn$meterFraPunkt
order(stedsnavn_api$navn$meterFraPunkt)
# Search for locality names coordinate by coordinate in a loop
#for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=1000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
stedsnavn_api$navn
nrow(stedsnavn_api$navn)
nrow(stedsnavn_api$navn) > 1
is.null(nrow(stedsnavn_api$navn))
is.null(nrow(stedsnavn_api$navn))
# Sorter stedsnavn på avstand til punkt
order(stedsnavn_api$navn$meterFraPunkt)[1]
# Search for locality names coordinate by coordinate in a loop
#for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# Sorter stedsnavn på avstand til punkt
order(stedsnavn_api$navn$meterFraPunkt)[1]
# Sorter stedsnavn på avstand til punkt
order(stedsnavn_api$navn$meterFraPunkt)[2]
# Sorter stedsnavn på avstand til punkt
order(stedsnavn_api$navn$meterFraPunkt)[1]
# Sorter stedsnavn på avstand til punkt
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
stedsnavn_api$navn$stedsnavn[[1]]
stedsnavn_api$navn$stedsnavn[[2]]
stedsnavn_api$navn$stedsnavn
# Bruk stedsnavnet med kortest avstand til punkt
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
stedsnavn_api$navn$stedsnavn[[n]]
stedsnavn_api$navn$stedsnavn[[n]][1]$skrivemåte
stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte
stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype
stedsnavn_api$navn$navneobjekttype
stedsnavn_api$navn$navneobjekttype[n]
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
#for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (!is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
utput$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (!is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
utput$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
i = 1
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (!is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
utput$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
output
!is.null(nrow(stedsnavn_api$navn))
stedsnavn_api
is.null(nrow(stedsnavn_api$navn))
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
utput$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
ooutput
output
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=3000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
i = 3
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=3000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
stedsnavn_api$navn
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
i = 3
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=10&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
return(output[,c(3:8)])
output[,c(3:8)]
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[1]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
i = 1
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
stedsnavn_api$navn$meterFraPunkt
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand radius by 50 meters for each seach. Maximum distance from a locality name is 2000 meters
#for (u in 1:40){
#r = 50*u # Radius
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=4000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# If API search is empty, return empty result
if (is.null(nrow(stedsnavn_api$navn))) {
output$locality[i] = ""
output$type[i] = ""
output$dist_m[i] = ""
output$orient[i] = ""
} else {
tryCatch({
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt$nord[n]
name_lon <- stedsnavn_api$navn$representasjonspunkt$øst[n]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
}
output
library(strandr)
library(strandr)
devtools::load_all(".")
library(strandr)
library(strandr)
library(strandr)
library(strandr)
library(strandr)
library(jsonlite)
library(strandr)
roxygen2::roxygenise()
library(strandr)
library(strandr)
roxygen2::roxygenise()
library(strandr)
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
i = 1
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Prepare URL for the locality name search
stedsnavn_url = paste0("https://ws.geonorge.no/stedsnavn/v1/punkt?nord=", lat[i], "&ost=", lon[i], "&koordsys=4326&radius=2000&utkoordsys=4326&treffPerSide=100&side=1")
# Make the API call
stedsnavn_api = fromJSON(stedsnavn_url)
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
stedsnavn_api$navn$representasjonspunkt$nord[n]
stedsnavn_api$navn$representasjonspunkt
stedsnavn_api$navn$representasjonspunkt[1,]
stedsnavn_api$navn$representasjonspunkt[,2]
stedsnavn_api$navn$representasjonspunkt[n,2]
stedsnavn_api$navn$representasjonspunkt[,2]
stedsnavn_api$navn$representasjonspunkt[,1]
# Use locality with shortet distance to point
n = order(stedsnavn_api$navn$meterFraPunkt)[1]
output$locality[i] = stedsnavn_api$navn$stedsnavn[[n]]$skrivemåte[1]
output$type[i] = stedsnavn_api$navn$navneobjekttype[n]
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt[n,2]
name_lon <- stedsnavn_api$navn$representasjonspunkt[n,1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
source("R/points2dist.R")
source("R/points2deg.R")
# Extract coordinates of locality name
name_lat <- stedsnavn_api$navn$representasjonspunkt[n,2]
name_lon <- stedsnavn_api$navn$representasjonspunkt[n,1]
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
output$dist_m[i] <- round(points2dist(name_lon, name_lat, lon[i], lat[i]))
output$orient[i] <- points2deg(name_lon, name_lat, lon[i], lat[i])
output
library(strandr)
stedsnavn_api$navn[[1]]
stedsnavn_api$navn[[1]]
stedsnavn_api$navn[[1]][1]
stedsnavn_api$navn$stedsnavn[[1]][1,]
stedsnavn_api$navn$stedsnavn[[1]][,1]
stedsnavn_api$navn$stedsnavn[[1]][1]
stedsnavn_api$navn$stedsnavn[[1]][1,1]
library(strandr)
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
library(sp)
library(rgdal)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
# Convert 'strand' spatial polygons dataframe to projection longlat and datum wgs84
strand.4.0 <- spTransform(strand, CRS(ll_prj))
devtools::load_all(".")
rm(list = c("points2deg", "points2dist"))
devtools::load_all(".")
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
test = strand
View(test)
lat = c(69.57696, 70.44070, 62.259262)
lon = c(24.840064, 23.186622, 12.734821)
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
# Convert 'strand' spatial polygons dataframe to projection longlat and datum wgs84
strand.4.0 <- spTransform(strand, CRS(ll_prj))
# Identify municipalities intersecting with input coordinates
strand_codes <- over(pts, strand.4.0)
data.frame(strand = strand_codes[,2])
strand_codes
strand_codes[,4]
library(strandr)
